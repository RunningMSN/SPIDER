import pandas as pd
from pyfaidx import Fasta
from helpers.crawler import reverse_complement
from Bio.Seq import Seq
import sys

def extract_sequences(input_tsv, translate, output):
	"""
	Extracts target sequences from a SPIDER search and outputs in FASTA format.

	Arguments:
		input_tsv -- tsv output generated by SPIDER
		translate -- True/false whether or not to translate the sequence from nucleotide to amino cid
		output -- Output file location. If none, output to console.

	Returns:
		True/False -- If extracted sequences (have valid sequences) return True. Otherwise return False.
	"""
	try:
		# Read SPIDER output file
		df_input = pd.read_csv(input_tsv, sep="\t")

		if df_input["Valid"].sum() > 0:
			# Iterate through the sequence
			for index, row in df_input.iterrows():
				if row["Valid"]:
					# Create header and grab sequence. Assumes that file is where it was when entered into SPIDER.
					header = f'>{row["Name"]}\t{row["Query"]}'
					# Store type of sequence output
					type = "NT"
					seq = get_sequence(row["Query"], row["Contig"], int(row["Start"]), int(row["End"]), row["Strand"])
					if translate:
						type = "AA"
						if not seq.lower().startswith("atg"):
							print(f"WARNING: The sequence for {row["Name"]} in {row["Query"]} does not start with ATG.", file=sys.stderr)
						seq = translate_seq(seq)

					wrapped_seq = wrap_sequence(seq)
					
					if not output:
						print(f"{header}\n{wrapped_seq}\n")
					else:
						with open(output, "a") as output_file:
							output_file.write(f"{header}\n{wrapped_seq}\n")
			# If have valid sequences to extract return true
			return True
		else:
			print(f"ERROR: The file {input_tsv} did not contain any valid sequences to extract.", file=sys.stderr)
	except FileNotFoundError:
		print(f"ERROR: The file {input_tsv} does not exist.", file=sys.stderr)
	except pd.errors.EmptyDataError:
		print(f"ERROR: The file {input_tsv} is empty.", file=sys.stderr)
	except pd.errors.ParserError:
		print(f"ERROR: The file {input_tsv} is malformed.", file=sys.stderr)
	except KeyError:
		print(f"ERROR: The file {input_tsv} is not in the correct format. Make sure your input to --fasta_extract is a valid output from SPIDER.", file=sys.stderr)
	except UnicodeDecodeError:
		print(f"ERROR: The file {input_tsv} is not in the correct format. Make sure your input to --fasta_extract is a valid output from SPIDER.", file=sys.stderr)
	# Return false in event of errors or no sequences to extract
	return False


def get_sequence(genome_loc, contig, start, end, strand):
	"""
	Extracts the virulence factor sequence using pyfaidx.

	Arguments:
		genome_loc -- Location of genome file.
		contig -- Contig on which sequence is located.
		start -- Start position
		end -- End position
		strand -- Forward or reverse strand

    Returns:
		seq -- Sequence that was identified
	"""
	genome = Fasta(genome_loc)
    # Must subtract 1 base from start since python index at 0 and BLAST coordinate index at 1
	seq = str(genome[contig][start-1:end])
	
	if strand == "-":
		seq = reverse_complement(seq)
    
	return seq

def wrap_sequence(seq, width=60):
	"""
	Wraps sequence to standard FASTA width.

	Arguments:
		seq -- Sequence to wrap
		width -- Number of characters per line

	Output:
		wrapped_seq -- Wrapped sequence with newline inserted every width characters.
	"""
	# Convert Seq to string
	seq = str(seq)
	# Add newline every width characters
	wrapped_seq = '\n'.join([seq[i:i+width] for i in range(0, len(seq), width)])

	return wrapped_seq

def translate_seq(seq):
	"""
	Translates nucleotide to amino acid sequence.

	Arguments:
		seq -- Nucleotide sequence

	Output:
		aa -- Amino acid sequence
	"""
	bio_object = Seq(seq)
	return str(bio_object.translate())

